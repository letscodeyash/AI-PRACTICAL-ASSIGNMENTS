#DFS ALGORITHM
graph={
    'A':['B','C'],
    'B':['D','E'],
    'C':['F'],
    'D':[],
    'E':['F'],
    'F':[]
}

visited=[]

def dfs(visited,graph,node):
    if node not in visited:
        print(node,end=" ")
        visited.append(node)
        for neighbor in graph[node]:
            dfs(visited,graph,neighbor)
            
dfs(visited,graph,'A')


#BFS ALGORITHM
from collections import deque
graph = {
    'A': ['C', 'B'],
    'B': ['E', 'D'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

visited = []

def bfs(graph, start):
    visited = []
    queue = deque([start])

    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node, end=" ")
            visited.append(node)
            neighbors = graph[node]
            for neighbor in neighbors:
                if neighbor not in visited:
                    queue.append(neighbor)

print("bfs sequence is : ")
bfs(graph, 'A')
