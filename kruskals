class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.edges = []

    def add_edge(self, u, v, w):
        self.edges.append([u, v, w])

    def kruskal_mst(self):
        self.edges = sorted(self.edges, key=lambda x: x[2])
        parent = [-1] * self.V
        mst = []
        total_cost = 0

        def find(subsets, i):
            if subsets[i] == -1:
                return i
            return find(subsets, subsets[i])

        def union(subsets, x, y):
            xroot = find(subsets, x)
            yroot = find(subsets, y)
            subsets[xroot] = yroot

        for edge in self.edges:
            u, v, w = edge
            x = find(parent, u)
            y = find(parent, v)
            if x != y:
                mst.append(edge)
                union(parent, x, y)
                total_cost += w

        return mst, total_cost

    def print_mst(self, mst_edges, total_cost):
        print("Edge\tWeight")
        for edge in mst_edges:
            print(f"{edge[0]} - {edge[1]}\t{edge[2]}")
        print("Total Cost of Minimum Spanning Tree:", total_cost)

# Sample Input and Output
g = Graph(4)
g.add_edge(0, 1, 10)
g.add_edge(0, 2, 6)
g.add_edge(0, 3, 5)
g.add_edge(1, 3, 15)
g.add_edge(2, 3, 4)
mst_edges, total_cost = g.kruskal_mst()
g.print_mst(mst_edges, total_cost)
