def is_safe(board, row, col, n):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_n_queens_bnb_util(board, row, n):
    if row >= n:
        return True
    
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row] = col
            if solve_n_queens_bnb_util(board, row + 1, n):
                return True
            board[row] = -1
    
    return False

def solve_n_queens_bnb(n):
    board = [-1] * n
    if not solve_n_queens_bnb_util(board, 0, n):
        print("Solution does not exist")
        return False
    
    print("Solution exists and the board configuration is:")
    for col in board:
        print(" ".join(["Q" if c == col else "." for c in range(n)]))

# Example usage
n = 8  # You can change the value of n to solve for different board sizes
solve_n_queens_bnb(n)
